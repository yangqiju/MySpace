package com.joyveb.mybatis.gens.core;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;

/**   
 *    
 * 项目名称：MySpace   
 * 类名称：OracelPaginationPlugin   
 * @Company: 北京畅享互联有限公司
 * @Copyright: Copyright (c) 2012
 * @Author： 杨其桔
 * 创建时间：2013-12-5 下午4:21:38   
 * 修改备注：   
 * @version    
 *    
 */
public class OracelPaginationPlugin extends PluginAdapter{

	@Override
	public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
			IntrospectedTable introspectedTable) {
		Field field = new Field();
		field.setName("startRow");
		field.setType(FullyQualifiedJavaType.getIntInstance());
//		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		DateFormat df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		field = new Field();
		field.setName("endRow");
		field.setType(FullyQualifiedJavaType.getIntInstance());
//		field.setType(FullyQualifiedJavaType.getStringInstance());
		field.setVisibility(JavaVisibility.PROTECTED);
		field.addJavaDocLine("/**");
		field.addJavaDocLine("* This method was generated by MyBatis Generator.");
		field.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		field.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		field.addJavaDocLine("* @generated "+df.format(new Date()));
		field.addJavaDocLine("*/");
		topLevelClass.addField(field);
		
		Method method = new Method();
		method.setName("setStartRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "startRow"));
//		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "startRow"));
		method.setReturnType(null);
		method.addBodyLine(" this.startRow = startRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getStartRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getIntInstance());
//		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return startRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("setEndRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.addParameter(new Parameter(FullyQualifiedJavaType.getIntInstance(), "endRow"));
//		method.addParameter(new Parameter(FullyQualifiedJavaType.getStringInstance(), "endRow"));
		method.setReturnType(null);
		method.addBodyLine(" this.endRow = endRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		
		method = new Method();
		method.setName("getEndRow");
		method.setVisibility(JavaVisibility.PUBLIC);
		method.setReturnType(FullyQualifiedJavaType.getIntInstance());
//		method.setReturnType(FullyQualifiedJavaType.getStringInstance());
		method.addBodyLine("  return endRow;");
		method.addJavaDocLine("/**");
		method.addJavaDocLine("* This method was generated by MyBatis Generator.");
		method.addJavaDocLine("* This method corresponds to the database table "+introspectedTable.getFullyQualifiedTableNameAtRuntime());
		method.addJavaDocLine("*");
		df = new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		method.addJavaDocLine("* @generated "+df.format(new Date()));
		method.addJavaDocLine("*/");
		topLevelClass.addMethod(method);
		return true;
	}
	
	@Override
	public boolean sqlMapDocumentGenerated(Document document,
			IntrospectedTable introspectedTable) {
		String pkname = "";
		List<IntrospectedColumn> pklist = introspectedTable.getPrimaryKeyColumns();
		for(IntrospectedColumn pkcol:pklist){
			pkname = pkcol.getActualColumnName();
			break;
		}
		if(pkname.length()<=0){
			pklist = introspectedTable.getNonBLOBColumns();
			for(IntrospectedColumn pkcol:pklist){
				pkname = pkcol.getActualColumnName();
				break;
			}
		}
		
		DateFormat df =  new SimpleDateFormat("EEE MMM ww HH:mm:ss z yyyy", Locale.US);
		XmlElement rootelement = document.getRootElement();
		String pagetailtemplate = "<sql id=\"oracle_Pagination_Tail\" >\r\n" +
									"	<if test=\"endRow !=null and startRow !=null\">\r\n" +
									"		<![CDATA[ ) row_ where rownum <= #{endRow} ) where rownum_ > #{startRow} ]]>\r\n" +
									"	</if>\r\n" +
									"  </sql>\r\n";
		String pageheadertemplate = "<sql id=\"oracle_Pagination_Head\" >\r\n"+
								  "	<if test=\"endRow !=null and startRow !=null\">\r\n" +
								  "		select * from ( select row_.*, rownum rownum_ from ( \r\n" +
								  "		 </if> \r\n" +
								  "  </sql>\r\n";
		
		TextElement pageheader = new TextElement(pageheadertemplate);
		rootelement.addElement(3, pageheader);
		TextElement pagetail = new TextElement(pagetailtemplate);
		rootelement.addElement(3, pagetail);
		return true;
	}
	
	@Override
	public boolean sqlMapSelectByExampleWithoutBLOBsElementGenerated(
			XmlElement element, IntrospectedTable introspectedTable) {
		XmlElement pageheader = new XmlElement("include");
		pageheader.addAttribute(new Attribute("refid", "oracle_Pagination_Head"));
		element.addElement(0, pageheader);
		
		XmlElement pagetail = new XmlElement("include");
		pagetail.addAttribute(new Attribute("refid", "oracle_Pagination_Tail"));
		element.addElement(pagetail);
		return super.sqlMapUpdateByExampleWithoutBLOBsElementGenerated(element,
				introspectedTable);
	}
	
	@Override
	public boolean validate(List<String> warnings) {
		return true;
	}

}
